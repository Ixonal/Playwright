{"version":3,"sources":["core/Stage.js","core/Stage.ts"],"names":["System","register","exports_1","context_1","rxjs_1","Renderer_1","Stage","id","setters","rxjs_1_1","Renderer_1_1","execute","rootSelector","this","renderer","Renderer","scenes","root","document","querySelector","prototype","lights","innerHTML","canvas","createElement","style","top","left","right","bottom","appendChild","generateEventStream","eventStream","filter","e","eventType","subscribe","console","log","eventObject","which","curtain","intermission","_this","rootEvents","documentEvents","streams","split","forEach","event","push","Observable","fromEvent","map","merge","apply"],"mappings":"AAAAA,OAAOC,UAAU,OAAQ,cAAe,SAASC,EAAWC,GACxD,YACA,IACIC,GAAQC,EACRC,CAFeH,IAAaA,EAAUI,EAG1C,QACIC,SACI,SAAUC,GACNL,EAASK,GAEb,SAAUC,GACNL,EAAaK,IAErBC,QAAS,WCRjBL,EAAA,WACE,QAAAA,GAAYM,GAQFC,KAAAC,SAAqB,GAAIT,GAAAU,SAGzBF,KAAAG,UARRH,KAAKI,KAAOC,SAASC,cAAcP,GAAgB,QAmEvD,MAzDSN,GAAAc,UAAAC,OAAP,WAqBE,MAlBAR,MAAKI,KAAKK,UAAY,GAGtBT,KAAKU,OAA4BL,SAASM,cAAc,UAExDX,KAAKU,OAAOE,MAAMC,IAAM,IACxBb,KAAKU,OAAOE,MAAME,KAAO,IACzBd,KAAKU,OAAOE,MAAMG,MAAQ,IAC1Bf,KAAKU,OAAOE,MAAMI,OAAS,IAC3BhB,KAAKI,KAAKa,YAAYjB,KAAKU,QAG3BV,KAAKkB,sBACLlB,KAAKmB,YAAYC,OAAO,SAAAC,GAAK,MAAgB,YAAhBA,EAAEC,YACdC,UAAU,SAAAF,GACTG,QAAQC,IAAoBJ,EAAEK,YAAaC,SAGtD3B,MAGFP,EAAAc,UAAAqB,QAAP,WACE,MAAO5B,OAGFP,EAAAc,UAAAsB,aAAP,WACE,MAAO7B,OAGDP,EAAAc,UAAAW,oBAAR,WAAA,GAAAY,GAAA9B,KAGM+B,EAAa,8BACbC,EAAiB,gBACjBC,IAEJF,GAAWG,MAAM,KAAKC,QAAQ,SAAAC,GAC5BH,EAAQI,KAAK9C,EAAA+C,WAAWC,UAAUT,EAAK1B,KAAMgC,GAAOI,IAAI,SAAAnB,GAAK,OAC3DC,UAAW,GAAKc,EAChBV,YAAaL,QAIjBW,EAAeE,MAAM,KAAKC,QAAQ,SAAAC,GAChCH,EAAQI,KAAK9C,EAAA+C,WAAWC,UAAUlC,SAAU+B,GAAOI,IAAI,SAAAnB,GAAK,OAC1DC,UAAW,GAAKc,EAChBV,YAAaL,QAIjBrB,KAAKmB,YAAc5B,EAAA+C,WAAWG,MAAMC,MAAMnD,EAAA+C,WAAYL,IAI1DxC,KAvEAJ,EAAA,QAAAI","file":"core/Stage.js","sourcesContent":["System.register([\"rxjs\", \"./Renderer\"], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var rxjs_1, Renderer_1;\n    var Stage;\n    return {\n        setters:[\n            function (rxjs_1_1) {\n                rxjs_1 = rxjs_1_1;\n            },\n            function (Renderer_1_1) {\n                Renderer_1 = Renderer_1_1;\n            }],\n        execute: function() {\n            Stage = (function () {\n                function Stage(rootSelector) {\n                    this.renderer = new Renderer_1.Renderer();\n                    this.scenes = [];\n                    this.root = document.querySelector(rootSelector || \"body\");\n                }\n                Stage.prototype.lights = function () {\n                    this.root.innerHTML = \"\";\n                    this.canvas = document.createElement(\"canvas\");\n                    this.canvas.style.top = \"0\";\n                    this.canvas.style.left = \"0\";\n                    this.canvas.style.right = \"0\";\n                    this.canvas.style.bottom = \"0\";\n                    this.root.appendChild(this.canvas);\n                    this.generateEventStream();\n                    this.eventStream.filter(function (e) { return e.eventType === \"keydown\"; })\n                        .subscribe(function (e) {\n                        console.log(e.eventObject.which);\n                    });\n                    return this;\n                };\n                Stage.prototype.curtain = function () {\n                    return this;\n                };\n                Stage.prototype.intermission = function () {\n                    return this;\n                };\n                Stage.prototype.generateEventStream = function () {\n                    var _this = this;\n                    var rootEvents = \"mousedown mouseup mousemove\", documentEvents = \"keydown keyup\", streams = [];\n                    rootEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(_this.root, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    documentEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(document, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    this.eventStream = rxjs_1.Observable.merge.apply(rxjs_1.Observable, streams);\n                };\n                return Stage;\n            }());\n            exports_1(\"Stage\", Stage);\n        }\n    }\n});","import { Observable } from \"rxjs\";\r\nimport { Scene } from \"./scene/Scene\";\r\nimport { Renderer } from \"./Renderer\";\r\nimport { IEventEntry } from \"./util/interface\";\r\n\r\nexport class Stage {\r\n  constructor(rootSelector: string) {\r\n    \r\n    //locate the root element\r\n    this.root = document.querySelector(rootSelector || \"body\");\r\n    \r\n  }\r\n  \r\n  public eventStream: Observable<IEventEntry>;\r\n  protected renderer: Renderer = new Renderer();\r\n  protected root: Element;\r\n  protected canvas: HTMLCanvasElement;\r\n  protected scenes: Scene[] = [];\r\n  \r\n  public lights(): Stage {\r\n    \r\n    //clear the root element out\r\n    this.root.innerHTML = \"\";\r\n    \r\n    //create a canvas element and put it in the root element\r\n    this.canvas = <HTMLCanvasElement>document.createElement(\"canvas\");\r\n    //fill in the whole area\r\n    this.canvas.style.top = \"0\";\r\n    this.canvas.style.left = \"0\";\r\n    this.canvas.style.right = \"0\";\r\n    this.canvas.style.bottom = \"0\";\r\n    this.root.appendChild(this.canvas);\r\n    \r\n    //now generate the event stream\r\n    this.generateEventStream();\r\n    this.eventStream.filter(e => e.eventType === \"keydown\")\r\n                    .subscribe(e => {\r\n                      console.log((<KeyboardEvent>e.eventObject).which);\r\n                    })\r\n    \r\n    return this;\r\n  }\r\n  \r\n  public curtain(): Stage {\r\n    return this;\r\n  }\r\n  \r\n  public intermission(): Stage {\r\n    return this;\r\n  }\r\n  \r\n  private generateEventStream() {\r\n    //take all mousedown, mouseup, mousemove, keydown, and keyup \r\n    //and combine them into the event stream\r\n    let rootEvents = \"mousedown mouseup mousemove\",\r\n        documentEvents = \"keydown keyup\",\r\n        streams = [];\r\n    \r\n    rootEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(this.root, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    documentEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(document, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    this.eventStream = Observable.merge.apply(Observable, streams);\r\n    \r\n    //this.eventStream.subscribe(event => console.log(event.eventType));\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}