{"version":3,"sources":["core/Stage.js","core/Stage.ts"],"names":["System","register","exports_1","context_1","rxjs_1","Stage","id","setters","rxjs_1_1","execute","rootSelector","this","root","document","querySelector","innerHTML","canvas","createElement","appendChild","generateEventStream","eventStream","filter","e","eventType","subscribe","console","log","eventObject","which","prototype","start","stop","_this","targetEvents","streams","split","forEach","event","push","Observable","fromEvent","map","merge","apply"],"mappings":"AAAAA,OAAOC,UAAU,QAAS,SAASC,EAAWC,GAC1C,YACA,IACIC,GACAC,CAFeF,IAAaA,EAAUG,EAG1C,QACIC,SACI,SAAUC,GACNJ,EAASI,IAEjBC,QAAS,WCLjBJ,EAAA,WACE,QAAAA,GAAYK,GAGVC,KAAKC,KAAOC,SAASC,cAAcJ,GAAgB,QAGnDC,KAAKC,KAAKG,UAAY,GAGtBJ,KAAKK,OAA4BH,SAASI,cAAc,UACxDN,KAAKC,KAAKM,YAAYP,KAAKK,QAG3BL,KAAKQ,sBACLR,KAAKS,YAAYC,OAAO,SAAAC,GAAK,MAAgB,YAAhBA,EAAEC,YACdC,UAAU,SAAAF,GACTG,QAAQC,IAAoBJ,EAAEK,YAAaC,SAiCjE,MAxBSvB,GAAAwB,UAAAC,MAAP,aAIOzB,EAAAwB,UAAAE,KAAP,aAIQ1B,EAAAwB,UAAAV,oBAAR,WAAA,GAAAa,GAAArB,KAGMsB,EAAe,4CACfC,IAEJD,GAAaE,MAAM,KAAKC,QAAQ,SAAAC,GAC9BH,EAAQI,KAAKlC,EAAAmC,WAAWC,UAAUR,EAAKpB,KAAM,IAAI6B,IAAI,SAAAnB,GAAK,OACxDC,UAAWc,EACXV,YAAaL,QAIjBX,KAAKS,YAAchB,EAAAmC,WAAWG,MAAMC,MAAMvC,EAAAmC,WAAYL,GACtDT,QAAQC,IAAIf,KAAKS,cAErBf,KAlDAH,EAAA,QAAAG","file":"core/Stage.js","sourcesContent":["System.register([\"rxjs\"], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var rxjs_1;\n    var Stage;\n    return {\n        setters:[\n            function (rxjs_1_1) {\n                rxjs_1 = rxjs_1_1;\n            }],\n        execute: function() {\n            Stage = (function () {\n                function Stage(rootSelector) {\n                    this.root = document.querySelector(rootSelector || \"body\");\n                    this.root.innerHTML = \"\";\n                    this.canvas = document.createElement(\"canvas\");\n                    this.root.appendChild(this.canvas);\n                    this.generateEventStream();\n                    this.eventStream.filter(function (e) { return e.eventType === \"keydown\"; })\n                        .subscribe(function (e) {\n                        console.log(e.eventObject.which);\n                    });\n                }\n                Stage.prototype.start = function () {\n                };\n                Stage.prototype.stop = function () {\n                };\n                Stage.prototype.generateEventStream = function () {\n                    var _this = this;\n                    var targetEvents = \"mousedown mouseup mousemove keydown keyup\", streams = [];\n                    targetEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(_this.root, \"\").map(function (e) { return ({\n                            eventType: event,\n                            eventObject: e\n                        }); }));\n                    });\n                    this.eventStream = rxjs_1.Observable.merge.apply(rxjs_1.Observable, streams);\n                    console.log(this.eventStream);\n                };\n                return Stage;\n            }());\n            exports_1(\"Stage\", Stage);\n        }\n    }\n});","import { Observable } from \"rxjs\";\r\nimport { Scene } from \"./scene/Scene\";\r\nimport { Renderer } from \"./Renderer\";\r\nimport { IEventEntry } from \"./util/interface\";\r\n\r\nexport class Stage {\r\n  constructor(rootSelector: string) {\r\n    \r\n    //locate the root element\r\n    this.root = document.querySelector(rootSelector || \"body\");\r\n    \r\n    //clear the root element out\r\n    this.root.innerHTML = \"\";\r\n    \r\n    //create a canvas element and put it in the root element\r\n    this.canvas = <HTMLCanvasElement>document.createElement(\"canvas\");\r\n    this.root.appendChild(this.canvas);\r\n    \r\n    //now generate the event stream\r\n    this.generateEventStream();\r\n    this.eventStream.filter(e => e.eventType === \"keydown\")\r\n                    .subscribe(e => {\r\n                      console.log((<KeyboardEvent>e.eventObject).which);\r\n                    })\r\n  }\r\n  \r\n  public eventStream: Observable<IEventEntry>;\r\n  protected root: Element;\r\n  protected canvas: HTMLCanvasElement;\r\n  protected scenes: Scene[];\r\n  \r\n  public start() {\r\n    \r\n  }\r\n  \r\n  public stop() {\r\n    \r\n  }\r\n  \r\n  private generateEventStream() {\r\n    //take all mousedown, mouseup, mousemove, keydown, and keyup \r\n    //and combine them into the event stream\r\n    let targetEvents = \"mousedown mouseup mousemove keydown keyup\",\r\n        streams = [];\r\n    \r\n    targetEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(this.root, \"\").map(e => ({\r\n        eventType: event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    this.eventStream = Observable.merge.apply(Observable, streams);\r\n    console.log(this.eventStream);\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}