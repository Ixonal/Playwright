{"version":3,"sources":["Stage.js","Stage.ts"],"names":["System","register","exports_1","context_1","rxjs_1","es6_symbol_1","Renderer_1","Stage","id","setters","rxjs_1_1","es6_symbol_1_1","Renderer_1_1","execute","rootSelector","this","renderer","Renderer","scenes","root","document","querySelector","Object","defineProperty","prototype","get","_eventStream","enumerable","configurable","lights","innerHTML","canvas","createElement","style","top","left","right","bottom","appendChild","generateEventStream","curtain","intermission","render","_this","rootEvents","documentEvents","streams","split","forEach","event","push","Observable","fromEvent","map","e","eventType","eventObject","merge","apply","share","RIGHT","Symbol","LEFT"],"mappings":"AAAAA,OAAOC,UAAU,OAAQ,aAAc,cAAe,SAASC,EAAWC,GACtE,YACA,IACIC,GAAQC,EAAcC,EACtBC,CAFeJ,IAAaA,EAAUK,EAG1C,QACIC,SACI,SAAUC,GACNN,EAASM,GAEb,SAAUC,GACNN,EAAeM,GAEnB,SAAUC,GACNN,EAAaM,IAErBC,QAAS,WCVjBN,EAAA,WACE,QAAAA,GAAYO,GAQFC,KAAAC,SAAqB,GAAIV,GAAAW,SAGzBF,KAAAG,UARRH,KAAKI,KAAOC,SAASC,cAAcP,GAAgB,QAwEvD,MA9DEQ,QAAAC,eAAWhB,EAAAiB,UAAA,eDIOC,ICJlB,WACE,MAAOV,MAAKW,cDMIC,YAAY,EACZC,cAAc,ICJzBrB,EAAAiB,UAAAK,OAAP,WAiBE,MAdAd,MAAKI,KAAKW,UAAY,GAGtBf,KAAKgB,OAA4BX,SAASY,cAAc,UAExDjB,KAAKgB,OAAOE,MAAMC,IAAM,IACxBnB,KAAKgB,OAAOE,MAAME,KAAO,IACzBpB,KAAKgB,OAAOE,MAAMG,MAAQ,IAC1BrB,KAAKgB,OAAOE,MAAMI,OAAS,IAC3BtB,KAAKI,KAAKmB,YAAYvB,KAAKgB,QAG3BhB,KAAKwB,sBAEExB,MAGFR,EAAAiB,UAAAgB,QAAP,WACE,MAAOzB,OAGFR,EAAAiB,UAAAiB,aAAP,WACE,MAAO1B,OAGFR,EAAAiB,UAAAkB,OAAP,aAIQnC,EAAAiB,UAAAe,oBAAR,WAAA,GAAAI,GAAA5B,KAGM6B,EAAa,wEACbC,EAAiB,gBACjBC,IAEJF,GAAWG,MAAM,KAAKC,QAAQ,SAAAC,GAC5BH,EAAQI,KAAK9C,EAAA+C,WAAWC,UAAUT,EAAKxB,KAAM8B,GAAOI,IAAI,SAAAC,GAAK,OAC3DC,UAAW,GAAKN,EAChBO,YAAaF,QAIjBT,EAAeE,MAAM,KAAKC,QAAQ,SAAAC,GAChCH,EAAQI,KAAK9C,EAAA+C,WAAWC,UAAUhC,SAAU6B,GAAOI,IAAI,SAAAC,GAAK,OAC1DC,UAAW,GAAKN,EAChBO,YAAaF,QAIjBvC,KAAKW,aAAyCtB,EAAA+C,WAAWM,MAAMC,MAAMtD,EAAA+C,WAAYL,GAAUa,SAG/EpD,EAAAqD,MAAgBvD,EAAAwD,SAChBtD,EAAAuD,KAAezD,EAAAwD,SAC/BtD,KA5EAL,EAAA,QAAAK","file":"Stage.js","sourcesContent":["System.register([\"rxjs\", \"es6-symbol\", \"./Renderer\"], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var rxjs_1, es6_symbol_1, Renderer_1;\n    var Stage;\n    return {\n        setters:[\n            function (rxjs_1_1) {\n                rxjs_1 = rxjs_1_1;\n            },\n            function (es6_symbol_1_1) {\n                es6_symbol_1 = es6_symbol_1_1;\n            },\n            function (Renderer_1_1) {\n                Renderer_1 = Renderer_1_1;\n            }],\n        execute: function() {\n            Stage = (function () {\n                function Stage(rootSelector) {\n                    this.renderer = new Renderer_1.Renderer();\n                    this.scenes = [];\n                    this.root = document.querySelector(rootSelector || \"body\");\n                }\n                Object.defineProperty(Stage.prototype, \"eventStream\", {\n                    get: function () {\n                        return this._eventStream;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                Stage.prototype.lights = function () {\n                    this.root.innerHTML = \"\";\n                    this.canvas = document.createElement(\"canvas\");\n                    this.canvas.style.top = \"0\";\n                    this.canvas.style.left = \"0\";\n                    this.canvas.style.right = \"0\";\n                    this.canvas.style.bottom = \"0\";\n                    this.root.appendChild(this.canvas);\n                    this.generateEventStream();\n                    return this;\n                };\n                Stage.prototype.curtain = function () {\n                    return this;\n                };\n                Stage.prototype.intermission = function () {\n                    return this;\n                };\n                Stage.prototype.render = function () {\n                };\n                Stage.prototype.generateEventStream = function () {\n                    var _this = this;\n                    var rootEvents = \"mousedown mouseup mousemove touchstart touchend touchmove touchcancel\", documentEvents = \"keydown keyup\", streams = [];\n                    rootEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(_this.root, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    documentEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(document, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    this._eventStream = rxjs_1.Observable.merge.apply(rxjs_1.Observable, streams).share();\n                };\n                Stage.RIGHT = es6_symbol_1.Symbol();\n                Stage.LEFT = es6_symbol_1.Symbol();\n                return Stage;\n            }());\n            exports_1(\"Stage\", Stage);\n        }\n    }\n});","import { Observable } from \"rxjs\";\r\nimport { Symbol } from \"es6-symbol\";\r\nimport { Scene } from \"./scene/Scene\";\r\nimport { Renderer } from \"./Renderer\";\r\nimport { IEventEntry, IRenderable } from \"./util/interfaces\";\r\n\r\nexport class Stage implements IRenderable {\r\n  constructor(rootSelector: string) {\r\n    \r\n    //locate the root element\r\n    this.root = document.querySelector(rootSelector || \"body\");\r\n    \r\n  }\r\n  \r\n  protected _eventStream: Observable<IEventEntry>;\r\n  protected renderer: Renderer = new Renderer();\r\n  protected root: Element;\r\n  protected canvas: HTMLCanvasElement;\r\n  protected scenes: Scene[] = [];\r\n  \r\n  public get eventStream() {\r\n    return this._eventStream;\r\n  }\r\n  \r\n  public lights(): Stage {\r\n    \r\n    //clear the root element out\r\n    this.root.innerHTML = \"\";\r\n    \r\n    //create a canvas element and put it in the root element\r\n    this.canvas = <HTMLCanvasElement>document.createElement(\"canvas\");\r\n    //fill in the whole area\r\n    this.canvas.style.top = \"0\";\r\n    this.canvas.style.left = \"0\";\r\n    this.canvas.style.right = \"0\";\r\n    this.canvas.style.bottom = \"0\";\r\n    this.root.appendChild(this.canvas);\r\n    \r\n    //now generate the event stream\r\n    this.generateEventStream();\r\n    \r\n    return this;\r\n  }\r\n  \r\n  public curtain(): Stage {\r\n    return this;\r\n  }\r\n  \r\n  public intermission(): Stage {\r\n    return this;\r\n  }\r\n  \r\n  public render(): void {\r\n    \r\n  }\r\n  \r\n  private generateEventStream() {\r\n    //take all mousedown, mouseup, mousemove, keydown, and keyup \r\n    //and combine them into the event stream\r\n    let rootEvents = \"mousedown mouseup mousemove touchstart touchend touchmove touchcancel\",\r\n        documentEvents = \"keydown keyup\",\r\n        streams = [];\r\n    \r\n    rootEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(this.root, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    documentEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(document, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    this._eventStream = (<Observable<IEventEntry>>Observable.merge.apply(Observable, streams)).share();\r\n  }\r\n  \r\n  public static RIGHT: symbol = Symbol();\r\n  public static LEFT: symbol = Symbol();\r\n}\r\n"],"sourceRoot":"/source/"}