{"version":3,"sources":["EventFactory.js","EventFactory.ts"],"names":["System","register","exports_1","context_1","rxjs_1","EventFactory","id","setters","rxjs_1_1","execute","stage","this","_eventStream","initEventStream","Object","defineProperty","prototype","get","enumerable","configurable","_this","rootEvents","documentEvents","streams","split","forEach","event","push","Observable","fromEvent","root","map","e","eventType","eventObject","document","merge","apply","share"],"mappings":"AAAAA,OAAOC,UAAU,QAAS,SAASC,EAAWC,GAC1C,YACA,IACIC,GACAC,CAFeF,IAAaA,EAAUG,EAG1C,QACIC,SACI,SAAUC,GACNJ,EAASI,IAEjBC,QAAS,WCNjBJ,EAAA,WACE,QAAAA,GAAYK,GAMJC,KAAAD,MAAe,KACfC,KAAAC,aAAwC,KAN9CD,KAAKD,MAAQA,EAEbC,KAAKE,kBAiCT,MA3BEC,QAAAC,eAAWV,EAAAW,UAAA,eDKOC,ICLlB,WACE,MAAON,MAAKC,cDOIM,YAAY,EACZC,cAAc,ICLxBd,EAAAW,UAAAH,gBAAR,WAAA,GAAAO,GAAAT,KAGMU,EAAa,wEACbC,EAAiB,gBACjBC,IAEJF,GAAWG,MAAM,KAAKC,QAAQ,SAAAC,GAC5BH,EAAQI,KAAKvB,EAAAwB,WAAWC,UAAUT,EAAKV,MAAMoB,KAAMJ,GAAOK,IAAI,SAAAC,GAAK,OACjEC,UAAW,GAAKP,EAChBQ,YAAaF,QAIjBV,EAAeE,MAAM,KAAKC,QAAQ,SAAAC,GAChCH,EAAQI,KAAKvB,EAAAwB,WAAWC,UAAUM,SAAUT,GAAOK,IAAI,SAAAC,GAAK,OAC1DC,UAAW,GAAKP,EAChBQ,YAAaF,QAIjBrB,KAAKC,aAAyCR,EAAAwB,WAAWQ,MAAMC,MAAMjC,EAAAwB,WAAYL,GAAUe,SAE/FjC,KArCAH,EAAA,eAAAG","file":"EventFactory.js","sourcesContent":["System.register([\"rxjs\"], function(exports_1, context_1) {\n    \"use strict\";\n    var __moduleName = context_1 && context_1.id;\n    var rxjs_1;\n    var EventFactory;\n    return {\n        setters:[\n            function (rxjs_1_1) {\n                rxjs_1 = rxjs_1_1;\n            }],\n        execute: function() {\n            EventFactory = (function () {\n                function EventFactory(stage) {\n                    this.stage = null;\n                    this._eventStream = null;\n                    this.stage = stage;\n                    this.initEventStream();\n                }\n                Object.defineProperty(EventFactory.prototype, \"eventStream\", {\n                    get: function () {\n                        return this._eventStream;\n                    },\n                    enumerable: true,\n                    configurable: true\n                });\n                EventFactory.prototype.initEventStream = function () {\n                    var _this = this;\n                    var rootEvents = \"mousedown mouseup mousemove touchstart touchend touchmove touchcancel\", documentEvents = \"keydown keyup\", streams = [];\n                    rootEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(_this.stage.root, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    documentEvents.split(\" \").forEach(function (event) {\n                        streams.push(rxjs_1.Observable.fromEvent(document, event).map(function (e) { return ({\n                            eventType: \"\" + event,\n                            eventObject: e\n                        }); }));\n                    });\n                    this._eventStream = rxjs_1.Observable.merge.apply(rxjs_1.Observable, streams).share();\n                };\n                return EventFactory;\n            }());\n            exports_1(\"EventFactory\", EventFactory);\n        }\n    }\n});","import { Stage } from \"../Stage\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IEventEntry } from \"./IEventEntry\";\r\n\r\nexport class EventFactory {\r\n  constructor(stage: Stage) {\r\n    this.stage = stage;\r\n    \r\n    this.initEventStream();\r\n  }\r\n  \r\n  private stage: Stage = null;\r\n  private _eventStream: Observable<IEventEntry> = null;\r\n  \r\n  public get eventStream() {\r\n    return this._eventStream;\r\n  }\r\n  \r\n  private initEventStream() {\r\n    //take all mousedown, mouseup, mousemove, keydown, and keyup \r\n    //and combine them into the event stream\r\n    let rootEvents = \"mousedown mouseup mousemove touchstart touchend touchmove touchcancel\",\r\n        documentEvents = \"keydown keyup\",\r\n        streams = [];\r\n    \r\n    rootEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(this.stage.root, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    documentEvents.split(\" \").forEach(event => {\r\n      streams.push(Observable.fromEvent(document, event).map(e => ({\r\n        eventType: \"\" + event,\r\n        eventObject: e\r\n      })));\r\n    });\r\n    \r\n    this._eventStream = (<Observable<IEventEntry>>Observable.merge.apply(Observable, streams)).share();\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}